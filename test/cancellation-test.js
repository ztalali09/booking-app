// test/cancellation-test.js
// Test complet du syst√®me d'annulation

const testBookingData = {
  firstName: 'Test',
  lastName: 'CANCELLATION',
  email: 'talalizakaria0@gmail.com',
  phone: '0123456789',
  country: 'FR',
  date: new Date(Date.now() + 48 * 60 * 60 * 1000).toISOString(), // Dans 48h (plus de 24h)
  time: '10:00',
  period: 'morning',
  firstConsultation: true,
  consultationReason: 'Test d\'annulation - Consultation de routine pour v√©rifier le syst√®me d\'annulation complet.',
  message: 'Ceci est un test d\'annulation pour v√©rifier que tout fonctionne correctement.'
}

async function createTestBooking() {
  console.log('üß™ Cr√©ation d\'une r√©servation de test pour l\'annulation...\n')
  console.log('üìã Donn√©es de test:')
  console.log(`   Patient: ${testBookingData.firstName} ${testBookingData.lastName}`)
  console.log(`   Email: ${testBookingData.email}`)
  console.log(`   Date: ${new Date(testBookingData.date).toLocaleDateString('fr-FR')}`)
  console.log(`   Heure: ${testBookingData.time} (${testBookingData.period === 'morning' ? 'Matin' : 'Apr√®s-midi'})`)
  console.log('')
  
  try {
    const response = await fetch('http://localhost:3000/api/bookings', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testBookingData)
    })
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ R√©servation de test cr√©√©e avec succ√®s !')
      console.log(`   ID: ${result.booking.id}`)
      console.log(`   Token d'annulation: ${result.booking.cancellationToken}`)
      console.log('')
      console.log('üìß Emails envoy√©s :')
      console.log('   ‚Ä¢ Confirmation patient (talalizakaria0@gmail.com)')
      console.log('   ‚Ä¢ Notification m√©decin (londalonda620@gmail.com)')
      console.log('')
      console.log('üìÖ Google Calendar synchronis√©')
      
      return result.booking
      
    } else {
      console.error('‚ùå Erreur lors de la cr√©ation de la r√©servation:')
      console.error(`   Status: ${response.status}`)
      console.error(`   Erreur: ${result.error}`)
      return null
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
    return null
  }
}

async function testCancellation(booking) {
  console.log('\nüß™ Test d\'annulation de la r√©servation...\n')
  console.log('üìã Processus d\'annulation:')
  console.log('   1. ‚úÖ R√©servation marqu√©e comme CANCELLED en base')
  console.log('   2. üìß Email d\'annulation envoy√© au patient')
  console.log('   3. üìß Notification d\'annulation envoy√©e au m√©decin')
  console.log('   4. üìÖ √âv√©nement supprim√© de Google Calendar')
  console.log('')
  
  try {
    const response = await fetch('http://localhost:3000/api/bookings/cancel', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        cancellationToken: booking.cancellationToken
      })
    })
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ Annulation r√©ussie !')
      console.log(`   Message: ${result.message}`)
      console.log('')
      console.log('üìß Emails d\'annulation envoy√©s :')
      console.log('   ‚Ä¢ talalizakaria0@gmail.com - Confirmation d\'annulation')
      console.log('   ‚Ä¢ londalonda620@gmail.com - Notification d\'annulation au m√©decin')
      console.log('')
      console.log('üìÖ Google Calendar mis √† jour :')
      console.log('   ‚Ä¢ √âv√©nement supprim√© automatiquement')
      console.log('')
      console.log('üîç V√©rifiez vos bo√Ætes email !')
      
      return true
      
    } else {
      console.error('‚ùå Erreur lors de l\'annulation:')
      console.error(`   Status: ${response.status}`)
      console.error(`   Erreur: ${result.error}`)
      return false
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
    return false
  }
}

async function runCancellationTest() {
  console.log('üöÄ Test complet du syst√®me d\'annulation\n')
  console.log('=' .repeat(70))
  console.log('üìß Ce test va cr√©er une r√©servation puis l\'annuler')
  console.log('‚ö†Ô∏è  V√©rifiez les emails : talalizakaria0@gmail.com et londalonda620@gmail.com')
  console.log('=' .repeat(70))
  console.log('')
  
  // √âtape 1: Cr√©er une r√©servation
  const booking = await createTestBooking()
  
  if (!booking) {
    console.log('‚ùå Impossible de cr√©er la r√©servation de test')
    return
  }
  
  // Attendre un peu entre la cr√©ation et l'annulation
  console.log('‚è≥ Attente de 3 secondes avant l\'annulation...')
  await new Promise(resolve => setTimeout(resolve, 3000))
  
  // √âtape 2: Annuler la r√©servation
  const cancellationSuccess = await testCancellation(booking)
  
  console.log('\n' + '=' .repeat(70))
  console.log('‚ú® Test d\'annulation termin√© !')
  console.log('')
  
  if (cancellationSuccess) {
    console.log('‚úÖ R√©sum√© du syst√®me d\'annulation :')
    console.log('   ‚Ä¢ R√©servation annul√©e en base de donn√©es')
    console.log('   ‚Ä¢ Email de confirmation envoy√© au patient')
    console.log('   ‚Ä¢ Notification d\'annulation envoy√©e au m√©decin')
    console.log('   ‚Ä¢ √âv√©nement supprim√© de Google Calendar')
    console.log('   ‚Ä¢ Design professionnel vert appliqu√©')
    console.log('')
    console.log('üéØ Le syst√®me d\'annulation fonctionne parfaitement !')
  } else {
    console.log('‚ùå Le test d\'annulation a √©chou√©')
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runCancellationTest().catch(console.error)
}

module.exports = { createTestBooking, testCancellation, runCancellationTest }
