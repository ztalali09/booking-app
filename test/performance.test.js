#!/usr/bin/env node

/**
 * Tests de performance pour l'API de r√©servation
 * Usage: node test/performance.test.js
 */

require('dotenv').config({ path: '.env.local' })

const BASE_URL = 'http://localhost:3000'

// Fonction pour mesurer le temps d'ex√©cution
async function measureTime(fn) {
  const start = Date.now()
  await fn()
  const end = Date.now()
  return end - start
}

// Fonction pour faire des requ√™tes HTTP
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, options)
    const data = await response.json()
    return { response, data, success: true }
  } catch (error) {
    return { response: null, data: null, error, success: false }
  }
}

// Tests de performance
async function runPerformanceTests() {
  console.log('‚ö° Tests de performance - Application de R√©servation\n')
  console.log('‚ïê'.repeat(60))
  
  let passedTests = 0
  let failedTests = 0
  
  // Test 1: Performance de l'API de disponibilit√© des dates
  console.log('\nüìã Test 1: Performance API de disponibilit√© des dates')
  console.log('‚îÄ'.repeat(50))
  try {
    const times = []
    const iterations = 5
    
    for (let i = 0; i < iterations; i++) {
      const time = await measureTime(async () => {
        const { success } = await makeRequest(`${BASE_URL}/api/availability/dates?month=11&year=2025`)
        if (!success) throw new Error('Request failed')
      })
      times.push(time)
    }
    
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length
    const minTime = Math.min(...times)
    const maxTime = Math.max(...times)
    
    console.log(`‚úÖ Temps moyen: ${avgTime.toFixed(2)}ms`)
    console.log(`   - Plus rapide: ${minTime}ms`)
    console.log(`   - Plus lent: ${maxTime}ms`)
    console.log(`   - ${iterations} requ√™tes test√©es`)
    
    if (avgTime < 1000) {
      console.log('‚úÖ Performance excellente (< 1s)')
    } else if (avgTime < 3000) {
      console.log('‚ö†Ô∏è  Performance acceptable (< 3s)')
    } else {
      console.log('‚ùå Performance lente (> 3s)')
    }
    
    passedTests++
  } catch (error) {
    console.error('‚ùå Test de performance √©chou√©:', error.message)
    failedTests++
  }
  
  // Test 2: Performance de l'API de cr√©neaux
  console.log('\nüìã Test 2: Performance API de cr√©neaux')
  console.log('‚îÄ'.repeat(50))
  try {
    const times = []
    const iterations = 3
    const testDate = '2025-11-20T00:00:00.000Z'
    
    for (let i = 0; i < iterations; i++) {
      const time = await measureTime(async () => {
        const { success } = await makeRequest(`${BASE_URL}/api/availability/slots?date=${testDate}`)
        if (!success) throw new Error('Request failed')
      })
      times.push(time)
    }
    
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length
    const minTime = Math.min(...times)
    const maxTime = Math.max(...times)
    
    console.log(`‚úÖ Temps moyen: ${avgTime.toFixed(2)}ms`)
    console.log(`   - Plus rapide: ${minTime}ms`)
    console.log(`   - Plus lent: ${maxTime}ms`)
    console.log(`   - ${iterations} requ√™tes test√©es`)
    
    if (avgTime < 2000) {
      console.log('‚úÖ Performance excellente (< 2s)')
    } else if (avgTime < 5000) {
      console.log('‚ö†Ô∏è  Performance acceptable (< 5s)')
    } else {
      console.log('‚ùå Performance lente (> 5s)')
    }
    
    passedTests++
  } catch (error) {
    console.error('‚ùå Test de performance √©chou√©:', error.message)
    failedTests++
  }
  
  // Test 3: Performance de cr√©ation de r√©servations
  console.log('\nüìã Test 3: Performance cr√©ation de r√©servations')
  console.log('‚îÄ'.repeat(50))
  try {
    const times = []
    const iterations = 3
    
    for (let i = 0; i < iterations; i++) {
      const bookingData = {
        firstName: `Test${i}`,
        lastName: 'Performance',
        email: `test.performance${i}@example.com`,
        phone: '0123456789',
        country: 'France',
        date: `2025-11-${25 + i}T00:00:00.000Z`,
        time: '15:00',
        period: 'afternoon',
        firstConsultation: true,
        consultationReason: `Test de performance ${i}`,
        message: 'Test automatique de performance'
      }
      
      const time = await measureTime(async () => {
        const { success } = await makeRequest(`${BASE_URL}/api/bookings`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(bookingData)
        })
        if (!success) throw new Error('Request failed')
      })
      times.push(time)
    }
    
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length
    const minTime = Math.min(...times)
    const maxTime = Math.max(...times)
    
    console.log(`‚úÖ Temps moyen: ${avgTime.toFixed(2)}ms`)
    console.log(`   - Plus rapide: ${minTime}ms`)
    console.log(`   - Plus lent: ${maxTime}ms`)
    console.log(`   - ${iterations} r√©servations cr√©√©es`)
    
    if (avgTime < 3000) {
      console.log('‚úÖ Performance excellente (< 3s)')
    } else if (avgTime < 8000) {
      console.log('‚ö†Ô∏è  Performance acceptable (< 8s)')
    } else {
      console.log('‚ùå Performance lente (> 8s)')
    }
    
    passedTests++
  } catch (error) {
    console.error('‚ùå Test de performance √©chou√©:', error.message)
    failedTests++
  }
  
  // Test 4: Test de charge - requ√™tes simultan√©es
  console.log('\nüìã Test 4: Test de charge - requ√™tes simultan√©es')
  console.log('‚îÄ'.repeat(50))
  try {
    const concurrentRequests = 5
    const startTime = Date.now()
    
    const promises = Array.from({ length: concurrentRequests }, (_, i) => 
      makeRequest(`${BASE_URL}/api/availability/dates?month=11&year=2025`)
    )
    
    const results = await Promise.all(promises)
    const endTime = Date.now()
    const totalTime = endTime - startTime
    
    const successCount = results.filter(r => r.success).length
    const failureCount = results.filter(r => !r.success).length
    
    console.log(`‚úÖ ${concurrentRequests} requ√™tes simultan√©es`)
    console.log(`   - Temps total: ${totalTime}ms`)
    console.log(`   - Temps moyen par requ√™te: ${(totalTime / concurrentRequests).toFixed(2)}ms`)
    console.log(`   - Succ√®s: ${successCount}`)
    console.log(`   - √âchecs: ${failureCount}`)
    
    if (successCount === concurrentRequests) {
      console.log('‚úÖ Toutes les requ√™tes simultan√©es ont r√©ussi')
    } else {
      console.log('‚ö†Ô∏è  Certaines requ√™tes simultan√©es ont √©chou√©')
    }
    
    passedTests++
  } catch (error) {
    console.error('‚ùå Test de charge √©chou√©:', error.message)
    failedTests++
  }
  
  // Test 5: Performance de r√©cup√©ration des r√©servations
  console.log('\nüìã Test 5: Performance r√©cup√©ration des r√©servations')
  console.log('‚îÄ'.repeat(50))
  try {
    const times = []
    const iterations = 3
    
    for (let i = 0; i < iterations; i++) {
      const time = await measureTime(async () => {
        const { success } = await makeRequest(`${BASE_URL}/api/bookings`)
        if (!success) throw new Error('Request failed')
      })
      times.push(time)
    }
    
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length
    const minTime = Math.min(...times)
    const maxTime = Math.max(...times)
    
    console.log(`‚úÖ Temps moyen: ${avgTime.toFixed(2)}ms`)
    console.log(`   - Plus rapide: ${minTime}ms`)
    console.log(`   - Plus lent: ${maxTime}ms`)
    console.log(`   - ${iterations} requ√™tes test√©es`)
    
    if (avgTime < 500) {
      console.log('‚úÖ Performance excellente (< 500ms)')
    } else if (avgTime < 1000) {
      console.log('‚ö†Ô∏è  Performance acceptable (< 1s)')
    } else {
      console.log('‚ùå Performance lente (> 1s)')
    }
    
    passedTests++
  } catch (error) {
    console.error('‚ùå Test de performance √©chou√©:', error.message)
    failedTests++
  }
  
  // Test 6: Test de m√©moire et stabilit√©
  console.log('\nüìã Test 6: Test de stabilit√©')
  console.log('‚îÄ'.repeat(50))
  try {
    const iterations = 10
    let successCount = 0
    
    for (let i = 0; i < iterations; i++) {
      const { success } = await makeRequest(`${BASE_URL}/api/availability/dates?month=11&year=2025`)
      if (success) successCount++
      
      // Petite pause entre les requ√™tes
      await new Promise(resolve => setTimeout(resolve, 100))
    }
    
    const successRate = (successCount / iterations) * 100
    
    console.log(`‚úÖ ${iterations} requ√™tes de stabilit√©`)
    console.log(`   - Taux de succ√®s: ${successRate.toFixed(1)}%`)
    console.log(`   - Succ√®s: ${successCount}`)
    console.log(`   - √âchecs: ${iterations - successCount}`)
    
    if (successRate >= 95) {
      console.log('‚úÖ Stabilit√© excellente (‚â• 95%)')
    } else if (successRate >= 90) {
      console.log('‚ö†Ô∏è  Stabilit√© acceptable (‚â• 90%)')
    } else {
      console.log('‚ùå Stabilit√© insuffisante (< 90%)')
    }
    
    passedTests++
  } catch (error) {
    console.error('‚ùå Test de stabilit√© √©chou√©:', error.message)
    failedTests++
  }
  
  // R√©sum√© des tests de performance
  console.log('\nüìä R√©sum√© des tests de performance')
  console.log('‚ïê'.repeat(60))
  console.log(`‚úÖ Tests r√©ussis: ${passedTests}`)
  console.log(`‚ùå Tests √©chou√©s: ${failedTests}`)
  console.log(`üìà Taux de r√©ussite: ${Math.round((passedTests / (passedTests + failedTests)) * 100)}%`)
  
  if (failedTests === 0) {
    console.log('\nüéâ Tous les tests de performance sont pass√©s!')
    console.log('‚úÖ Votre application est performante et stable.')
  } else {
    console.log('\n‚ö†Ô∏è  Certains tests de performance ont √©chou√©.')
    console.log('üîß Consid√©rez l\'optimisation des performances.');
  }
  
  console.log('\nüìù Recommandations:')
  console.log('   - Surveillez les temps de r√©ponse en production')
  console.log('   - Utilisez un cache pour les donn√©es fr√©quemment consult√©es')
  console.log('   - Optimisez les requ√™tes de base de donn√©es si n√©cessaire')
  console.log('   - Testez r√©guli√®rement les performances')
}

// Ex√©cuter les tests de performance
runPerformanceTests().catch(console.error)
