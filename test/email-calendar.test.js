#!/usr/bin/env node

/**
 * Tests sp√©cifiques pour v√©rifier les emails et Google Calendar
 * Usage: node test/email-calendar.test.js
 */

require('dotenv').config({ path: '.env.local' })

const BASE_URL = 'http://localhost:3000'

// Fonction pour faire des requ√™tes HTTP
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, options)
    const data = await response.json()
    return { response, data, success: true }
  } catch (error) {
    return { response: null, data: null, error, success: false }
  }
}

// Fonction pour attendre
function wait(ms) {
  return new Promise(resolve => setTimeout(resolve, ms))
}

// Tests sp√©cifiques email et calendrier
async function runEmailCalendarTests() {
  console.log('üìßüß™ Tests Email et Google Calendar - Application de R√©servation\n')
  console.log('‚ïê'.repeat(70))
  
  let passedTests = 0
  let failedTests = 0
  
  // Test 1: V√©rifier la configuration email
  console.log('\nüìã Test 1: Configuration Email')
  console.log('‚îÄ'.repeat(50))
  try {
    console.log('üîç V√©rification de la configuration email...')
    console.log(`   - SMTP_HOST: ${process.env.SMTP_HOST || '‚ùå Manquant'}`)
    console.log(`   - SMTP_PORT: ${process.env.SMTP_PORT || '‚ùå Manquant'}`)
    console.log(`   - SMTP_USER: ${process.env.SMTP_USER || '‚ùå Manquant'}`)
    console.log(`   - SMTP_PASSWORD: ${process.env.SMTP_PASSWORD ? '‚úÖ Configur√©' : '‚ùå Manquant'}`)
    console.log(`   - SMTP_FROM_NAME: ${process.env.SMTP_FROM_NAME || '‚ùå Manquant'}`)
    
    const emailConfigured = process.env.SMTP_USER && process.env.SMTP_PASSWORD
    if (emailConfigured) {
      console.log('‚úÖ Configuration email compl√®te')
      console.log('üìß Les emails de confirmation seront envoy√©s')
    } else {
      console.log('‚ö†Ô∏è  Configuration email incompl√®te')
      console.log('üìß Les emails sont d√©sactiv√©s')
    }
    passedTests++
  } catch (error) {
    console.error('‚ùå Erreur configuration email:', error.message)
    failedTests++
  }
  
  // Test 2: V√©rifier la configuration Google Calendar
  console.log('\nüìã Test 2: Configuration Google Calendar')
  console.log('‚îÄ'.repeat(50))
  try {
    console.log('üîç V√©rification de la configuration Google Calendar...')
    console.log(`   - GOOGLE_SERVICE_ACCOUNT_EMAIL: ${process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || '‚ùå Manquant'}`)
    console.log(`   - GOOGLE_CALENDAR_CALENDAR_ID: ${process.env.GOOGLE_CALENDAR_CALENDAR_ID ? '‚úÖ Configur√©' : '‚ùå Manquant'}`)
    console.log(`   - GOOGLE_SERVICE_ACCOUNT_PROJECT_ID: ${process.env.GOOGLE_SERVICE_ACCOUNT_PROJECT_ID || '‚ùå Manquant'}`)
    
    const calendarConfigured = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL && process.env.GOOGLE_CALENDAR_CALENDAR_ID
    if (calendarConfigured) {
      console.log('‚úÖ Configuration Google Calendar compl√®te')
      console.log('üìÖ Les r√©servations seront synchronis√©es avec Google Calendar')
      console.log(`   - Calendrier: ${process.env.GOOGLE_CALENDAR_CALENDAR_ID}`)
    } else {
      console.log('‚ö†Ô∏è  Configuration Google Calendar incompl√®te')
      console.log('üìÖ La synchronisation est d√©sactiv√©e')
    }
    passedTests++
  } catch (error) {
    console.error('‚ùå Erreur configuration Google Calendar:', error.message)
    failedTests++
  }
  
  // Test 3: Cr√©er une r√©servation de test pour EMAIL
  console.log('\nüìã Test 3: R√©servation de test pour EMAIL')
  console.log('‚îÄ'.repeat(50))
  try {
    const emailTestData = {
      firstName: 'Test',
      lastName: 'Email',
      email: 'londalonda620@gmail.com', // Votre email pour recevoir le test
      phone: '0123456789',
      country: 'France',
      date: '2025-12-01T00:00:00.000Z',
      time: '14:00',
      period: 'afternoon',
      firstConsultation: true,
      consultationReason: 'Test d\'envoi d\'email de confirmation',
      message: 'Ceci est un test pour v√©rifier que les emails fonctionnent correctement'
    }
    
    console.log('üìß Cr√©ation d\'une r√©servation de test...')
    console.log(`   - Email destinataire: ${emailTestData.email}`)
    console.log(`   - Date: ${emailTestData.date}`)
    console.log(`   - Heure: ${emailTestData.time}`)
    
    const { response, data, error } = await makeRequest(`${BASE_URL}/api/bookings`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(emailTestData)
    })
    
    if (error) throw error
    
    if (response.status === 201) {
      console.log('‚úÖ R√©servation cr√©√©e avec succ√®s')
      console.log(`   - ID: ${data.booking.id}`)
      console.log(`   - Token: ${data.booking.cancellationToken.substring(0, 15)}...`)
      console.log('')
      console.log('üìß V√âRIFIEZ VOTRE BO√éTE EMAIL !')
      console.log('   - Cherchez un email de "Cabinet M√©dical"')
      console.log('   - Sujet: "‚úÖ Confirmation de votre rendez-vous"')
      console.log('   - V√©rifiez les d√©tails de la r√©servation')
      console.log('   - V√©rifiez le lien d\'annulation')
    } else if (response.status === 409) {
      console.log('‚ö†Ô∏è  Cr√©neau d√©j√† r√©serv√©, essayons une autre heure...')
      
      // Essayer avec une heure diff√©rente
      emailTestData.time = '15:00'
      const retryResponse = await makeRequest(`${BASE_URL}/api/bookings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(emailTestData)
      })
      
      if (retryResponse.response.status === 201) {
        console.log('‚úÖ R√©servation cr√©√©e avec succ√®s (2√®me tentative)')
        console.log(`   - ID: ${retryResponse.data.booking.id}`)
        console.log('üìß V√âRIFIEZ VOTRE BO√éTE EMAIL !')
      } else {
        console.log('‚ùå Impossible de cr√©er une r√©servation de test')
      }
    } else {
      console.log(`‚ùå Erreur inattendue: ${response.status}`)
    }
    
    passedTests++
  } catch (error) {
    console.error('‚ùå Test email √©chou√©:', error.message)
    failedTests++
  }
  
  // Test 4: Cr√©er une r√©servation de test pour GOOGLE CALENDAR
  console.log('\nüìã Test 4: R√©servation de test pour GOOGLE CALENDAR')
  console.log('‚îÄ'.repeat(50))
  try {
    const calendarTestData = {
      firstName: 'Test',
      lastName: 'Calendar',
      email: 'test.calendar@example.com',
      phone: '0123456789',
      country: 'France',
      date: '2025-12-02T00:00:00.000Z',
      time: '16:00',
      period: 'afternoon',
      firstConsultation: true,
      consultationReason: 'Test de synchronisation Google Calendar',
      message: 'Ceci est un test pour v√©rifier la synchronisation avec Google Calendar'
    }
    
    console.log('üìÖ Cr√©ation d\'une r√©servation de test...')
    console.log(`   - Date: ${calendarTestData.date}`)
    console.log(`   - Heure: ${calendarTestData.time}`)
    console.log(`   - Patient: ${calendarTestData.firstName} ${calendarTestData.lastName}`)
    
    const { response, data, error } = await makeRequest(`${BASE_URL}/api/bookings`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(calendarTestData)
    })
    
    if (error) throw error
    
    if (response.status === 201) {
      console.log('‚úÖ R√©servation cr√©√©e avec succ√®s')
      console.log(`   - ID: ${data.booking.id}`)
      console.log('')
      console.log('üìÖ V√âRIFIEZ VOTRE GOOGLE CALENDAR !')
      console.log('   - Allez sur https://calendar.google.com/')
      console.log('   - Cherchez le calendrier "R√©servations Cabinet M√©dical"')
      console.log('   - V√©rifiez l\'√©v√©nement cr√©√© pour le 2 d√©cembre 2025 √† 16h00')
      console.log('   - Titre: "Consultation - Test Calendar"')
    } else if (response.status === 409) {
      console.log('‚ö†Ô∏è  Cr√©neau d√©j√† r√©serv√©, essayons une autre heure...')
      
      // Essayer avec une heure diff√©rente
      calendarTestData.time = '17:00'
      const retryResponse = await makeRequest(`${BASE_URL}/api/bookings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(calendarTestData)
      })
      
      if (retryResponse.response.status === 201) {
        console.log('‚úÖ R√©servation cr√©√©e avec succ√®s (2√®me tentative)')
        console.log(`   - ID: ${retryResponse.data.booking.id}`)
        console.log('üìÖ V√âRIFIEZ VOTRE GOOGLE CALENDAR !')
      } else {
        console.log('‚ùå Impossible de cr√©er une r√©servation de test')
      }
    } else {
      console.log(`‚ùå Erreur inattendue: ${response.status}`)
    }
    
    passedTests++
  } catch (error) {
    console.error('‚ùå Test Google Calendar √©chou√©:', error.message)
    failedTests++
  }
  
  // Test 5: Cr√©er plusieurs r√©servations pour tester la synchronisation
  console.log('\nüìã Test 5: R√©servations multiples pour test complet')
  console.log('‚îÄ'.repeat(50))
  try {
    const testReservations = [
      {
        firstName: 'Patient',
        lastName: 'A',
        email: 'patient.a@example.com',
        phone: '0123456789',
        country: 'France',
        date: '2025-12-03T00:00:00.000Z',
        time: '09:00',
        period: 'morning',
        firstConsultation: true,
        consultationReason: 'Consultation de routine - Patient A',
        message: 'Test de synchronisation multiple'
      },
      {
        firstName: 'Patient',
        lastName: 'B',
        email: 'patient.b@example.com',
        phone: '0123456789',
        country: 'France',
        date: '2025-12-03T00:00:00.000Z',
        time: '10:00',
        period: 'morning',
        firstConsultation: false,
        consultationReason: 'Suivi m√©dical - Patient B',
        message: 'Test de synchronisation multiple'
      },
      {
        firstName: 'Patient',
        lastName: 'C',
        email: 'patient.c@example.com',
        phone: '0123456789',
        country: 'France',
        date: '2025-12-03T00:00:00.000Z',
        time: '14:00',
        period: 'afternoon',
        firstConsultation: true,
        consultationReason: 'Premi√®re consultation - Patient C',
        message: 'Test de synchronisation multiple'
      }
    ]
    
    console.log('üìÖ Cr√©ation de 3 r√©servations de test...')
    let successCount = 0
    
    for (let i = 0; i < testReservations.length; i++) {
      const reservation = testReservations[i]
      console.log(`   - R√©servation ${i + 1}: ${reservation.firstName} ${reservation.lastName} - ${reservation.time}`)
      
      const { response, data, error } = await makeRequest(`${BASE_URL}/api/bookings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(reservation)
      })
      
      if (response && response.status === 201) {
        console.log(`     ‚úÖ Cr√©√©e (ID: ${data.booking.id.substring(0, 10)}...)`)
        successCount++
      } else if (response && response.status === 409) {
        console.log(`     ‚ö†Ô∏è  Cr√©neau occup√©`)
      } else {
        console.log(`     ‚ùå Erreur: ${response ? response.status : 'Unknown'}`)
      }
      
      // Petite pause entre les r√©servations
      await wait(500)
    }
    
    console.log(`\nüìä R√©sultat: ${successCount}/${testReservations.length} r√©servations cr√©√©es`)
    
    if (successCount > 0) {
      console.log('üìÖ V√âRIFIEZ VOTRE GOOGLE CALENDAR !')
      console.log('   - Allez sur https://calendar.google.com/')
      console.log('   - Cherchez le calendrier "R√©servations Cabinet M√©dical"')
      console.log('   - V√©rifiez les √©v√©nements du 3 d√©cembre 2025')
      console.log('   - Vous devriez voir plusieurs consultations programm√©es')
    }
    
    passedTests++
  } catch (error) {
    console.error('‚ùå Test r√©servations multiples √©chou√©:', error.message)
    failedTests++
  }
  
  // Test 6: V√©rifier les r√©servations existantes
  console.log('\nüìã Test 6: V√©rification des r√©servations existantes')
  console.log('‚îÄ'.repeat(50))
  try {
    const { response, data, error } = await makeRequest(`${BASE_URL}/api/bookings`)
    if (error) throw error
    
    console.log('üìä R√©servations dans la base de donn√©es:')
    console.log(`   - Total: ${data.bookings.length} r√©servation(s)`)
    
    // Afficher les 5 derni√®res r√©servations
    const recentBookings = data.bookings.slice(-5)
    console.log('   - 5 derni√®res r√©servations:')
    recentBookings.forEach((booking, index) => {
      const date = new Date(booking.date).toLocaleDateString('fr-FR')
      const synced = booking.syncedWithGoogle ? '‚úÖ' : '‚ùå'
      console.log(`     ${index + 1}. ${booking.firstName} ${booking.lastName} - ${date} ${booking.time} ${synced}`)
    })
    
    // Compter les r√©servations synchronis√©es
    const syncedCount = data.bookings.filter(b => b.syncedWithGoogle).length
    console.log(`   - Synchronis√©es avec Google Calendar: ${syncedCount}/${data.bookings.length}`)
    
    passedTests++
  } catch (error) {
    console.error('‚ùå Test v√©rification r√©servations √©chou√©:', error.message)
    failedTests++
  }
  
  // R√©sum√© des tests
  console.log('\nüìä R√©sum√© des tests Email et Google Calendar')
  console.log('‚ïê'.repeat(70))
  console.log(`‚úÖ Tests r√©ussis: ${passedTests}`)
  console.log(`‚ùå Tests √©chou√©s: ${failedTests}`)
  console.log(`üìà Taux de r√©ussite: ${Math.round((passedTests / (passedTests + failedTests)) * 100)}%`)
  
  console.log('\nüîç V√âRIFICATIONS √Ä FAIRE:')
  console.log('‚ïê'.repeat(70))
  console.log('üìß EMAIL:')
  console.log('   1. Ouvrez votre bo√Æte email (londalonda620@gmail.com)')
  console.log('   2. Cherchez un email de "Cabinet M√©dical"')
  console.log('   3. V√©rifiez le contenu de l\'email de confirmation')
  console.log('   4. Testez le lien d\'annulation si pr√©sent')
  console.log('')
  console.log('üìÖ GOOGLE CALENDAR:')
  console.log('   1. Allez sur https://calendar.google.com/')
  console.log('   2. Cherchez le calendrier "R√©servations Cabinet M√©dical"')
  console.log('   3. V√©rifiez les √©v√©nements cr√©√©s')
  console.log('   4. V√©rifiez les d√©tails des √©v√©nements (titre, heure, description)')
  console.log('')
  console.log('üîß SI VOUS NE VOYEZ RIEN:')
  console.log('   - V√©rifiez les logs de l\'application')
  console.log('   - V√©rifiez la configuration dans .env.local')
  console.log('   - V√©rifiez les permissions du service account Google')
  console.log('   - V√©rifiez les param√®tres de s√©curit√© Gmail')
  
  if (failedTests === 0) {
    console.log('\nüéâ Tous les tests sont pass√©s!')
    console.log('‚úÖ V√©rifiez maintenant votre email et Google Calendar.')
  } else {
    console.log('\n‚ö†Ô∏è  Certains tests ont √©chou√©.')
    console.log('üîß V√©rifiez la configuration avant de tester manuellement.');
  }
}

// Ex√©cuter les tests
runEmailCalendarTests().catch(console.error)

