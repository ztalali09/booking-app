#!/usr/bin/env node

/**
 * Tests simples pour l'API de r√©servation
 * Usage: node test/simple.test.js
 */

// Charger les variables d'environnement
require('dotenv').config({ path: '.env.local' })

const BASE_URL = 'http://localhost:3000'

// Fonction utilitaire pour les tests
function expect(actual) {
  return {
    toBe: (expected) => {
      if (actual !== expected) {
        throw new Error(`Expected ${expected}, but got ${actual}`)
      }
    },
    toBeDefined: () => {
      if (actual === undefined) {
        throw new Error(`Expected value to be defined, but got undefined`)
      }
    },
    toContain: (expected) => {
      if (!actual.includes(expected)) {
        throw new Error(`Expected "${actual}" to contain "${expected}"`)
      }
    }
  }
}

// Fonction pour faire des requ√™tes HTTP
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, options)
    const data = await response.json()
    return { response, data }
  } catch (error) {
    return { response: null, data: null, error }
  }
}

// Tests simples
async function runSimpleTests() {
  console.log('üß™ Tests simples - Application de R√©servation\n')
  console.log('‚ïê'.repeat(60))
  
  let passedTests = 0
  let failedTests = 0
  
  // Test 1: V√©rifier la configuration
  console.log('\nüìã Test 1: Configuration de l\'application')
  console.log('‚îÄ'.repeat(40))
  try {
    console.log('üîç Variables d\'environnement:')
    console.log(`   - DATABASE_URL: ${process.env.DATABASE_URL ? '‚úÖ' : '‚ùå'}`)
    console.log(`   - NEXT_PUBLIC_APP_URL: ${process.env.NEXT_PUBLIC_APP_URL ? '‚úÖ' : '‚ùå'}`)
    console.log(`   - GOOGLE_SERVICE_ACCOUNT_EMAIL: ${process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL ? '‚úÖ' : '‚ùå'}`)
    console.log(`   - GOOGLE_CALENDAR_CALENDAR_ID: ${process.env.GOOGLE_CALENDAR_CALENDAR_ID ? '‚úÖ' : '‚ùå'}`)
    console.log(`   - SMTP_USER: ${process.env.SMTP_USER ? '‚úÖ' : '‚ùå'}`)
    console.log(`   - SMTP_PASSWORD: ${process.env.SMTP_PASSWORD ? '‚úÖ' : '‚ùå'}`)
    
    const hasBasicConfig = process.env.DATABASE_URL && process.env.NEXT_PUBLIC_APP_URL
    expect(hasBasicConfig).toBe(true)
    console.log('‚úÖ Configuration de base OK')
    passedTests++
  } catch (error) {
    console.error('‚ùå Configuration manquante:', error.message)
    failedTests++
  }
  
  // Test 2: API de disponibilit√© des dates
  console.log('\nüìã Test 2: API de disponibilit√© des dates')
  console.log('‚îÄ'.repeat(40))
  try {
    const { response, data, error } = await makeRequest(`${BASE_URL}/api/availability/dates?month=11&year=2025`)
    if (error) throw error
    
    expect(response.status).toBe(200)
    expect(data.availableDates).toBeDefined()
    console.log('‚úÖ API de disponibilit√© des dates fonctionnelle')
    console.log(`   - ${data.availableDates.length} dates disponibles en novembre 2025`)
    passedTests++
  } catch (error) {
    console.error('‚ùå API de disponibilit√© des dates √©chou√©e:', error.message)
    failedTests++
  }
  
  // Test 3: API de disponibilit√© des cr√©neaux
  console.log('\nüìã Test 3: API de disponibilit√© des cr√©neaux')
  console.log('‚îÄ'.repeat(40))
  try {
    const testDate = '2025-11-20T00:00:00.000Z'
    const { response, data, error } = await makeRequest(`${BASE_URL}/api/availability/slots?date=${testDate}`)
    if (error) throw error
    
    expect(response.status).toBe(200)
    expect(data).toBeDefined()
    console.log('‚úÖ API de disponibilit√© des cr√©neaux fonctionnelle')
    if (data.slots) {
      console.log(`   - ${data.slots.length} cr√©neaux disponibles`)
    } else {
      console.log('   - R√©ponse re√ßue:', JSON.stringify(data).substring(0, 100) + '...')
    }
    passedTests++
  } catch (error) {
    console.error('‚ùå API de disponibilit√© des cr√©neaux √©chou√©e:', error.message)
    failedTests++
  }
  
  // Test 4: Cr√©er une r√©servation
  console.log('\nüìã Test 4: Cr√©ation d\'une r√©servation')
  console.log('‚îÄ'.repeat(40))
  try {
    const bookingData = {
      firstName: 'Test',
      lastName: 'Simple',
      email: 'test.simple@example.com',
      phone: '0123456789',
      country: 'France',
      date: '2025-11-25T00:00:00.000Z',
      time: '15:00',
      period: 'afternoon',
      firstConsultation: true,
      consultationReason: 'Test simple d\'int√©gration',
      message: 'Test automatique'
    }
    
    const { response, data, error } = await makeRequest(`${BASE_URL}/api/bookings`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(bookingData)
    })
    
    if (error) throw error
    
    expect(response.status).toBe(201)
    expect(data.success).toBe(true)
    expect(data.booking.id).toBeDefined()
    
    console.log('‚úÖ R√©servation cr√©√©e avec succ√®s')
    console.log(`   - ID: ${data.booking.id}`)
    console.log(`   - Token: ${data.booking.cancellationToken.substring(0, 15)}...`)
    passedTests++
  } catch (error) {
    console.error('‚ùå Cr√©ation de r√©servation √©chou√©e:', error.message)
    failedTests++
  }
  
  // Test 5: R√©cup√©rer les r√©servations
  console.log('\nüìã Test 5: R√©cup√©ration des r√©servations')
  console.log('‚îÄ'.repeat(40))
  try {
    const { response, data, error } = await makeRequest(`${BASE_URL}/api/bookings`)
    if (error) throw error
    
    expect(response.status).toBe(200)
    expect(data.bookings).toBeDefined()
    console.log('‚úÖ API de r√©cup√©ration des r√©servations fonctionnelle')
    console.log(`   - ${data.bookings.length} r√©servation(s) trouv√©e(s)`)
    
    // Afficher les 3 derni√®res r√©servations
    const recentBookings = data.bookings.slice(-3)
    console.log('   - Derni√®res r√©servations:')
    recentBookings.forEach((booking, index) => {
      console.log(`     ${index + 1}. ${booking.firstName} ${booking.lastName} - ${booking.date} ${booking.time}`)
    })
    passedTests++
  } catch (error) {
    console.error('‚ùå R√©cup√©ration des r√©servations √©chou√©e:', error.message)
    failedTests++
  }
  
  // Test 6: Validation des donn√©es invalides
  console.log('\nüìã Test 6: Validation des donn√©es invalides')
  console.log('‚îÄ'.repeat(40))
  try {
    const invalidData = {
      firstName: 'A', // Trop court
      lastName: 'Test',
      email: 'email-invalide',
      phone: '123',
      date: '2025-11-25T00:00:00.000Z',
      time: '25:00', // Heure invalide
      period: 'soir', // P√©riode invalide
      firstConsultation: true,
      consultationReason: 'Court'
    }
    
    const { response, data, error } = await makeRequest(`${BASE_URL}/api/bookings`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(invalidData)
    })
    
    if (error) throw error
    
    expect(response.status).toBe(400)
    expect(data.error).toBeDefined()
    expect(data.details).toBeDefined()
    
    console.log('‚úÖ Validation des donn√©es fonctionnelle')
    console.log(`   - Erreur: ${data.error}`)
    console.log(`   - ${data.details.length} erreur(s) de validation d√©tect√©e(s)`)
    passedTests++
  } catch (error) {
    console.error('‚ùå Test de validation √©chou√©:', error.message)
    failedTests++
  }
  
  // Test 7: V√©rifier la synchronisation Google Calendar
  console.log('\nüìã Test 7: Synchronisation Google Calendar')
  console.log('‚îÄ'.repeat(40))
  try {
    if (process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL && process.env.GOOGLE_CALENDAR_CALENDAR_ID) {
      console.log('‚úÖ Configuration Google Calendar d√©tect√©e')
      console.log(`   - Service Account: ${process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL}`)
      console.log(`   - Calendrier: ${process.env.GOOGLE_CALENDAR_CALENDAR_ID.substring(0, 20)}...`)
      console.log('   - Les r√©servations devraient √™tre synchronis√©es avec Google Calendar')
    } else {
      console.log('‚ö†Ô∏è  Configuration Google Calendar manquante')
    }
    passedTests++
  } catch (error) {
    console.error('‚ùå Test Google Calendar √©chou√©:', error.message)
    failedTests++
  }
  
  // Test 8: V√©rifier la configuration email
  console.log('\nüìã Test 8: Configuration email')
  console.log('‚îÄ'.repeat(40))
  try {
    if (process.env.SMTP_USER && process.env.SMTP_PASSWORD) {
      console.log('‚úÖ Configuration email d√©tect√©e')
      console.log(`   - Email: ${process.env.SMTP_USER}`)
      console.log('   - Les emails de confirmation devraient √™tre envoy√©s')
    } else {
      console.log('‚ö†Ô∏è  Configuration email manquante')
      console.log('   - Les emails sont d√©sactiv√©s')
    }
    passedTests++
  } catch (error) {
    console.error('‚ùå Test email √©chou√©:', error.message)
    failedTests++
  }
  
  // R√©sum√© des tests
  console.log('\nüìä R√©sum√© des tests')
  console.log('‚ïê'.repeat(60))
  console.log(`‚úÖ Tests r√©ussis: ${passedTests}`)
  console.log(`‚ùå Tests √©chou√©s: ${failedTests}`)
  console.log(`üìà Taux de r√©ussite: ${Math.round((passedTests / (passedTests + failedTests)) * 100)}%`)
  
  if (failedTests === 0) {
    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s!')
    console.log('‚úÖ Votre application de r√©servation est enti√®rement fonctionnelle.')
    console.log('\nüìù Fonctionnalit√©s test√©es:')
    console.log('   ‚úÖ API de disponibilit√© des dates')
    console.log('   ‚úÖ API de disponibilit√© des cr√©neaux')
    console.log('   ‚úÖ Cr√©ation de r√©servations')
    console.log('   ‚úÖ R√©cup√©ration des r√©servations')
    console.log('   ‚úÖ Validation des donn√©es')
    console.log('   ‚úÖ Configuration Google Calendar')
    console.log('   ‚úÖ Configuration email')
  } else {
    console.log('\n‚ö†Ô∏è  Certains tests ont √©chou√©.')
    console.log('üîß V√©rifiez la configuration et relancez les tests.')
  }
}

// Ex√©cuter les tests
runSimpleTests().catch(console.error)

