// test/doctor-message-test.js
// Test du syst√®me avec message du m√©decin

const testBookingData = {
  firstName: 'Test',
  lastName: 'DOCTOR_MESSAGE',
  email: 'talalizakaria0@gmail.com',
  phone: '0123456789',
  country: 'FR',
  date: new Date('2024-11-09T10:00:00.000Z').toISOString(), // Samedi 9 novembre 2024
  time: '10:30',
  period: 'morning',
  firstConsultation: true,
  consultationReason: 'Test du message du m√©decin - Consultation de routine pour v√©rifier le syst√®me de message personnalis√©.',
  message: 'Ceci est un test du message du m√©decin lors de l\'annulation.'
}

async function createTestBooking() {
  console.log('üß™ Cr√©ation d\'une r√©servation de test pour le message du m√©decin...\n')
  console.log('üìã Donn√©es de test:')
  console.log(`   Patient: ${testBookingData.firstName} ${testBookingData.lastName}`)
  console.log(`   Email: ${testBookingData.email}`)
  console.log(`   Date: ${new Date(testBookingData.date).toLocaleDateString('fr-FR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`)
  console.log(`   Heure: ${testBookingData.time} (${testBookingData.period === 'morning' ? 'Matin' : 'Apr√®s-midi'})`)
  console.log('')
  
  try {
    const response = await fetch('http://localhost:3000/api/bookings', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testBookingData)
    })
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ R√©servation de test cr√©√©e avec succ√®s !')
      console.log(`   ID: ${result.booking.id}`)
      console.log(`   Token d'annulation: ${result.booking.cancellationToken}`)
      console.log('')
      console.log('üìß Emails envoy√©s :')
      console.log('   ‚Ä¢ Confirmation patient (talalizakaria0@gmail.com)')
      console.log('   ‚Ä¢ Notification m√©decin (londalonda620@gmail.com)')
      console.log('')
      console.log('üîó Liens d\'annulation :')
      console.log(`   ‚Ä¢ Patient: http://localhost:3000/cancel?token=${result.booking.cancellationToken}`)
      console.log(`   ‚Ä¢ M√©decin: http://localhost:3000/doctor/cancel?token=${result.booking.cancellationToken}`)
      console.log('')
      console.log('üìÖ Google Calendar synchronis√©')
      
      return result.booking
      
    } else {
      console.error('‚ùå Erreur lors de la cr√©ation de la r√©servation:')
      console.error(`   Status: ${response.status}`)
      console.error(`   Erreur: ${result.error}`)
      return null
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
    return null
  }
}

async function testDoctorCancellationWithMessage(booking) {
  console.log('\nüß™ Test d\'annulation par le m√©decin avec message personnalis√©...\n')
  
  const doctorMessage = "D√©sol√© pour ce contretemps. J'ai eu une urgence m√©dicale et je ne pourrai pas √™tre disponible √† l'heure pr√©vue. Je vous contacterai dans les plus brefs d√©lais pour reprogrammer votre rendez-vous √† un moment plus appropri√©. Merci de votre compr√©hension."
  
  console.log('üìù Message du m√©decin qui sera envoy√© :')
  console.log(`   "${doctorMessage}"`)
  console.log('')
  
  try {
    const response = await fetch('http://localhost:3000/api/bookings/doctor-cancel', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        cancellationToken: booking.cancellationToken,
        cancelledBy: 'doctor',
        doctorMessage: doctorMessage
      })
    })
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ API d\'annulation m√©decin avec message fonctionne !')
      console.log(`   Message: ${result.message}`)
      console.log('')
      console.log('üìß Email d\'annulation envoy√© au patient :')
      console.log('   ‚Ä¢ talalizakaria0@gmail.com - Notification d\'annulation par le m√©decin')
      console.log('   ‚Ä¢ Message personnalis√© du m√©decin inclus')
      console.log('   ‚Ä¢ Design professionnel avec section d√©di√©e')
      console.log('')
      console.log('üìÖ Google Calendar mis √† jour')
      
      return true
    } else {
      console.error('‚ùå Erreur API annulation m√©decin avec message:')
      console.error(`   Status: ${response.status}`)
      console.error(`   Erreur: ${result.error}`)
      return false
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion API annulation m√©decin:', error.message)
    return false
  }
}

async function runDoctorMessageTest() {
  console.log('üöÄ Test du syst√®me avec message du m√©decin\n')
  console.log('=' .repeat(80))
  console.log('üë®‚Äç‚öïÔ∏è Ce test va cr√©er une r√©servation et tester l\'annulation avec message du m√©decin')
  console.log('‚ö†Ô∏è  V√©rifiez les emails : talalizakaria0@gmail.com et londalonda620@gmail.com')
  console.log('üåê Interface m√©decin : http://localhost:3000/doctor/cancel?token=TOKEN')
  console.log('=' .repeat(80))
  console.log('')
  
  // √âtape 1: Cr√©er une r√©servation
  const booking = await createTestBooking()
  
  if (!booking) {
    console.log('‚ùå Impossible de cr√©er la r√©servation de test')
    return
  }
  
  // Attendre un peu entre la cr√©ation et l'annulation
  console.log('‚è≥ Attente de 3 secondes avant l\'annulation avec message...')
  await new Promise(resolve => setTimeout(resolve, 3000))
  
  // √âtape 2: Tester l'annulation avec message du m√©decin
  const cancellationSuccess = await testDoctorCancellationWithMessage(booking)
  
  console.log('\n' + '=' .repeat(80))
  console.log('‚ú® Test du message du m√©decin termin√© !')
  console.log('')
  
  if (cancellationSuccess) {
    console.log('‚úÖ R√©sum√© du syst√®me avec message du m√©decin :')
    console.log('   ‚Ä¢ Interface m√©decin avec champ de message')
    console.log('   ‚Ä¢ API d\'annulation avec support du message')
    console.log('   ‚Ä¢ Email patient avec message personnalis√©')
    console.log('   ‚Ä¢ Design professionnel pour le message')
    console.log('   ‚Ä¢ Google Calendar synchronis√©')
    console.log('')
    console.log('üéØ Fonctionnalit√©s du message du m√©decin :')
    console.log('   ‚Ä¢ Champ de texte avec limite de 500 caract√®res')
    console.log('   ‚Ä¢ Compteur de caract√®res en temps r√©el')
    console.log('   ‚Ä¢ Message optionnel (peut √™tre vide)')
    console.log('   ‚Ä¢ Affichage dans l\'email du patient')
    console.log('   ‚Ä¢ Design bleu professionnel')
    console.log('')
    console.log('üìß Structure de l\'email patient :')
    console.log('   ‚Ä¢ Header rouge "Annulation par le m√©decin"')
    console.log('   ‚Ä¢ D√©tails du rendez-vous annul√©')
    console.log('   ‚Ä¢ Section "Message du m√©decin" (si fourni)')
    console.log('   ‚Ä¢ Prochaines √©tapes')
    console.log('   ‚Ä¢ Informations de contact')
    console.log('')
    console.log('üîó Liens d\'annulation :')
    console.log(`   ‚Ä¢ Patient: http://localhost:3000/cancel?token=${booking.cancellationToken}`)
    console.log(`   ‚Ä¢ M√©decin: http://localhost:3000/doctor/cancel?token=${booking.cancellationToken}`)
    console.log('')
    console.log('üéâ Le syst√®me avec message du m√©decin est COMPLET !')
  } else {
    console.log('‚ùå Le test du message du m√©decin a √©chou√©')
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runDoctorMessageTest().catch(console.error)
}

module.exports = { createTestBooking, testDoctorCancellationWithMessage, runDoctorMessageTest }
