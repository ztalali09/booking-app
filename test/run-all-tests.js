#!/usr/bin/env node

/**
 * Script pour ex√©cuter tous les tests
 * Usage: node test/run-all-tests.js
 */

const { spawn } = require('child_process')
const path = require('path')

// Couleurs pour la console
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
}

function colorize(text, color) {
  return `${colors[color]}${text}${colors.reset}`
}

// Fonction pour ex√©cuter un test
function runTest(testName, testFile) {
  return new Promise((resolve) => {
    console.log(`\n${colorize('üß™', 'cyan')} ${colorize(testName, 'bright')}`)
    console.log('‚îÄ'.repeat(60))
    
    const child = spawn('node', [testFile], {
      stdio: 'pipe',
      cwd: __dirname
    })
    
    let output = ''
    let errorOutput = ''
    
    child.stdout.on('data', (data) => {
      output += data.toString()
    })
    
    child.stderr.on('data', (data) => {
      errorOutput += data.toString()
    })
    
    child.on('close', (code) => {
      console.log(output)
      if (errorOutput) {
        console.error(colorize('Erreurs:', 'red'))
        console.error(errorOutput)
      }
      
      if (code === 0) {
        console.log(colorize('‚úÖ Test r√©ussi', 'green'))
        resolve({ success: true, output, error: errorOutput })
      } else {
        console.log(colorize('‚ùå Test √©chou√©', 'red'))
        resolve({ success: false, output, error: errorOutput })
      }
    })
  })
}

// Fonction principale
async function runAllTests() {
  console.log(colorize('üöÄ Suite de tests compl√®te - Application de R√©servation', 'bright'))
  console.log(colorize('‚ïê'.repeat(70), 'cyan'))
  
  const tests = [
    {
      name: 'Tests d\'int√©gration',
      file: 'integration.test.js'
    },
    {
      name: 'Tests simples',
      file: 'simple.test.js'
    },
    {
      name: 'Tests de performance',
      file: 'performance.test.js'
    }
  ]
  
  const results = []
  let totalPassed = 0
  let totalFailed = 0
  
  // Ex√©cuter tous les tests
  for (const test of tests) {
    const result = await runTest(test.name, test.file)
    results.push({ ...test, ...result })
    
    if (result.success) {
      totalPassed++
    } else {
      totalFailed++
    }
  }
  
  // R√©sum√© final
  console.log(`\n${colorize('üìä R√âSUM√â FINAL', 'bright')}`)
  console.log(colorize('‚ïê'.repeat(70), 'cyan'))
  
  results.forEach((result, index) => {
    const status = result.success ? colorize('‚úÖ', 'green') : colorize('‚ùå', 'red')
    console.log(`${status} ${result.name}`)
  })
  
  console.log(`\n${colorize('üìà STATISTIQUES GLOBALES', 'bright')}`)
  console.log(`   ${colorize('‚úÖ Tests r√©ussis:', 'green')} ${totalPassed}`)
  console.log(`   ${colorize('‚ùå Tests √©chou√©s:', 'red')} ${totalFailed}`)
  console.log(`   ${colorize('üìä Taux de r√©ussite:', 'blue')} ${Math.round((totalPassed / (totalPassed + totalFailed)) * 100)}%`)
  
  if (totalFailed === 0) {
    console.log(`\n${colorize('üéâ F√âLICITATIONS!', 'green')}`)
    console.log(colorize('Tous les tests sont pass√©s avec succ√®s!', 'green'))
    console.log(colorize('Votre application de r√©servation est pr√™te pour la production.', 'green'))
  } else {
    console.log(`\n${colorize('‚ö†Ô∏è  ATTENTION', 'yellow')}`)
    console.log(colorize('Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.', 'yellow'))
  }
  
  console.log(`\n${colorize('üìù FONCTIONNALIT√âS TEST√âES', 'bright')}`)
  console.log('   ‚úÖ Accessibilit√© de l\'application')
  console.log('   ‚úÖ API de disponibilit√© des dates')
  console.log('   ‚úÖ API de disponibilit√© des cr√©neaux')
  console.log('   ‚úÖ Cr√©ation de r√©servations')
  console.log('   ‚úÖ R√©cup√©ration des r√©servations')
  console.log('   ‚úÖ Validation des donn√©es')
  console.log('   ‚úÖ Configuration Google Calendar')
  console.log('   ‚úÖ Configuration email')
  console.log('   ‚úÖ Performance des APIs')
  console.log('   ‚úÖ Stabilit√© de l\'application')
  console.log('   ‚úÖ Gestion des requ√™tes simultan√©es')
  
  console.log(`\n${colorize('üîß PROCHAINES √âTAPES', 'bright')}`)
  console.log('   1. D√©ployez votre application en production')
  console.log('   2. Configurez un monitoring des performances')
  console.log('   3. Mettez en place des sauvegardes r√©guli√®res')
  console.log('   4. Surveillez les logs d\'erreurs')
  console.log('   5. Testez r√©guli√®rement les fonctionnalit√©s')
  
  console.log(`\n${colorize('üìû SUPPORT', 'bright')}`)
  console.log('   - Documentation: README.md')
  console.log('   - Logs: V√©rifiez la console de l\'application')
  console.log('   - Configuration: .env.local')
  
  process.exit(totalFailed > 0 ? 1 : 0)
}

// Ex√©cuter tous les tests
runAllTests().catch((error) => {
  console.error(colorize('‚ùå Erreur lors de l\'ex√©cution des tests:', 'red'))
  console.error(error)
  process.exit(1)
})

