#!/usr/bin/env node

/**
 * Test final de v√©rification - Email et Google Calendar
 * Usage: node test/final-verification.test.js
 */

require('dotenv').config({ path: '.env.local' })

const BASE_URL = 'http://localhost:3000'

// Fonction pour faire des requ√™tes HTTP
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, options)
    const data = await response.json()
    return { response, data, success: true }
  } catch (error) {
    return { response: null, data: null, error, success: false }
  }
}

// Test final de v√©rification
async function runFinalVerification() {
  console.log('üéØ Test Final de V√©rification - Email et Google Calendar\n')
  console.log('‚ïê'.repeat(70))
  
  console.log('üìã Instructions de v√©rification:')
  console.log('‚îÄ'.repeat(50))
  console.log('1. üìß V√âRIFIEZ VOTRE EMAIL')
  console.log('   - Ouvrez: londalonda620@gmail.com')
  console.log('   - Cherchez: "Cabinet M√©dical" ou "Confirmation"')
  console.log('   - V√©rifiez: D√©tails de la r√©servation')
  console.log('')
  console.log('2. üìÖ V√âRIFIEZ GOOGLE CALENDAR')
  console.log('   - Ouvrez: https://calendar.google.com/')
  console.log('   - Cherchez: "R√©servations Cabinet M√©dical"')
  console.log('   - V√©rifiez: √âv√©nements cr√©√©s')
  console.log('')
  
  // Cr√©er une r√©servation de test finale
  console.log('üß™ Cr√©ation d\'une r√©servation de test finale...')
  console.log('‚îÄ'.repeat(50))
  
  try {
    const finalTestData = {
      firstName: 'VERIFICATION',
      lastName: 'FINAL',
      email: 'londalonda620@gmail.com',
      phone: '0123456789',
      country: 'France',
      date: '2025-12-05T00:00:00.000Z',
      time: '15:00',
      period: 'afternoon',
      firstConsultation: true,
      consultationReason: 'Test final de v√©rification - Email et Google Calendar',
      message: 'Ceci est un test final pour v√©rifier que les emails et la synchronisation Google Calendar fonctionnent correctement. Si vous recevez cet email et voyez cet √©v√©nement dans votre calendrier, tout fonctionne parfaitement!'
    }
    
    console.log('üìù D√©tails de la r√©servation de test:')
    console.log(`   - Patient: ${finalTestData.firstName} ${finalTestData.lastName}`)
    console.log(`   - Email: ${finalTestData.email}`)
    console.log(`   - Date: ${finalTestData.date}`)
    console.log(`   - Heure: ${finalTestData.time}`)
    console.log(`   - Motif: ${finalTestData.consultationReason}`)
    
    const { response, data, error } = await makeRequest(`${BASE_URL}/api/bookings`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(finalTestData)
    })
    
    if (error) {
      console.error('‚ùå Erreur lors de la cr√©ation:', error.message)
      return
    }
    
    if (response.status === 201) {
      console.log('\n‚úÖ R√©servation cr√©√©e avec succ√®s!')
      console.log(`   - ID: ${data.booking.id}`)
      console.log(`   - Token d'annulation: ${data.booking.cancellationToken.substring(0, 20)}...`)
      
      console.log('\nüîç V√âRIFICATIONS √Ä EFFECTUER:')
      console.log('‚ïê'.repeat(70))
      
      console.log('\nüìß 1. V√âRIFICATION EMAIL:')
      console.log('   üì¨ Ouvrez votre bo√Æte email: londalonda620@gmail.com')
      console.log('   üîç Cherchez un email r√©cent de "Cabinet M√©dical"')
      console.log('   üìã V√©rifiez que l\'email contient:')
      console.log('      - Sujet: "‚úÖ Confirmation de votre rendez-vous"')
      console.log('      - Nom du patient: VERIFICATION FINAL')
      console.log('      - Date: 5 d√©cembre 2025')
      console.log('      - Heure: 15:00')
      console.log('      - Motif: Test final de v√©rification...')
      console.log('      - Lien d\'annulation (si pr√©sent)')
      
      console.log('\nüìÖ 2. V√âRIFICATION GOOGLE CALENDAR:')
      console.log('   üåê Ouvrez: https://calendar.google.com/')
      console.log('   üìÖ Cherchez le calendrier "R√©servations Cabinet M√©dical"')
      console.log('   üîç V√©rifiez qu\'il y a un √©v√©nement pour le 5 d√©cembre 2025 √† 15h00')
      console.log('   üìã V√©rifiez que l\'√©v√©nement contient:')
      console.log('      - Titre: "Consultation - VERIFICATION FINAL"')
      console.log('      - Date: 5 d√©cembre 2025')
      console.log('      - Heure: 15:00 - 15:30')
      console.log('      - Description: D√©tails de la consultation')
      
      console.log('\nüéØ 3. R√âSULTATS ATTENDUS:')
      console.log('   ‚úÖ Si vous voyez l\'email ET l\'√©v√©nement: TOUT FONCTIONNE!')
      console.log('   ‚ö†Ô∏è  Si vous ne voyez que l\'un des deux: Probl√®me partiel')
      console.log('   ‚ùå Si vous ne voyez ni l\'un ni l\'autre: Probl√®me de configuration')
      
      console.log('\nüîß 4. EN CAS DE PROBL√àME:')
      console.log('   - V√©rifiez les logs de l\'application (terminal)')
      console.log('   - V√©rifiez la configuration dans .env.local')
      console.log('   - V√©rifiez les param√®tres de s√©curit√© Gmail')
      console.log('   - V√©rifiez les permissions du service account Google')
      
    } else if (response.status === 409) {
      console.log('‚ö†Ô∏è  Cr√©neau d√©j√† r√©serv√©, essayons une autre heure...')
      
      // Essayer avec une heure diff√©rente
      finalTestData.time = '16:00'
      const retryResponse = await makeRequest(`${BASE_URL}/api/bookings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(finalTestData)
      })
      
      if (retryResponse.response && retryResponse.response.status === 201) {
        console.log('‚úÖ R√©servation cr√©√©e avec succ√®s (2√®me tentative)')
        console.log(`   - ID: ${retryResponse.data.booking.id}`)
        console.log('   - Heure modifi√©e: 16:00')
        console.log('\nüîç V√âRIFIEZ VOTRE EMAIL ET GOOGLE CALENDAR!')
      } else {
        console.log('‚ùå Impossible de cr√©er une r√©servation de test')
        console.log('   - Tous les cr√©neaux semblent occup√©s')
        console.log('   - Essayez de nettoyer la base de donn√©es ou changez de date')
      }
    } else {
      console.log(`‚ùå Erreur inattendue: ${response.status}`)
      console.log('   - V√©rifiez les logs de l\'application')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test final:', error.message)
  }
  
  console.log('\nüìä R√âSUM√â DU TEST FINAL')
  console.log('‚ïê'.repeat(70))
  console.log('‚úÖ R√©servation de test cr√©√©e')
  console.log('üìß Email de confirmation envoy√© (si configur√©)')
  console.log('üìÖ √âv√©nement Google Calendar cr√©√© (si configur√©)')
  console.log('')
  console.log('üéâ VOTRE APPLICATION DE R√âSERVATION EST PR√äTE!')
  console.log('')
  console.log('üìù PROCHAINES √âTAPES:')
  console.log('   1. V√©rifiez votre email et Google Calendar')
  console.log('   2. Testez l\'interface utilisateur sur http://localhost:3000')
  console.log('   3. Cr√©ez quelques r√©servations de test')
  console.log('   4. D√©ployez en production quand vous √™tes satisfait')
  console.log('')
  console.log('üöÄ F√©licitations! Votre syst√®me de r√©servation m√©dicale est op√©rationnel!')
}

// Ex√©cuter le test final
runFinalVerification().catch(console.error)

