// test/real-email-test.js
// Test avec l'email r√©el talalizakaria0@gmail.com

const testBookingData1 = {
  firstName: 'Zakaria',
  lastName: 'TALALI',
  email: 'talalizakaria0@gmail.com',
  phone: '0123456789',
  country: 'FR',
  date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Demain
  time: '14:30',
  period: 'afternoon',
  firstConsultation: true,
  consultationReason: 'Consultation de routine et contr√¥le de la tension art√©rielle. Le patient souhaite √©galement discuter des r√©sultats de ses derniers examens sanguins.',
  message: 'Bonjour Docteur, j\'aimerais prendre rendez-vous pour un contr√¥le g√©n√©ral. Merci beaucoup.'
}

const testBookingData2 = {
  firstName: 'Marie',
  lastName: 'DUPONT',
  email: 'talalizakaria0@gmail.com',
  phone: '0987654321',
  country: 'FR',
  date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(), // Apr√®s-demain
  time: '09:15',
  period: 'morning',
  firstConsultation: false,
  consultationReason: 'Suivi post-op√©ratoire et renouvellement d\'ordonnance pour traitement de l\'hypertension art√©rielle.',
  message: 'Bonjour, je viens pour mon suivi habituel.'
}

async function testBookingWithRealEmail(bookingData, testName) {
  console.log(`\nüß™ ${testName}...\n`)
  console.log('üìã Donn√©es de r√©servation:')
  console.log(`   Patient: ${bookingData.firstName} ${bookingData.lastName}`)
  console.log(`   Email: ${bookingData.email}`)
  console.log(`   Date: ${new Date(bookingData.date).toLocaleDateString('fr-FR')}`)
  console.log(`   Heure: ${bookingData.time} (${bookingData.period === 'morning' ? 'Matin' : 'Apr√®s-midi'})`)
  console.log(`   Motif: ${bookingData.consultationReason.substring(0, 60)}...`)
  console.log(`   Message: ${bookingData.message?.substring(0, 40)}...`)
  console.log('')
  
  try {
    const response = await fetch('http://localhost:3000/api/bookings', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(bookingData)
    })
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ R√©servation cr√©√©e avec succ√®s !')
      console.log(`   ID: ${result.booking.id}`)
      console.log(`   Token d'annulation: ${result.booking.cancellationToken}`)
      console.log('')
      console.log('üìß Emails envoy√©s :')
      console.log('   ‚Ä¢ Confirmation patient (talalizakaria0@gmail.com)')
      console.log('   ‚Ä¢ Notification m√©decin (design professionnel vert)')
      console.log('')
      console.log('üîç V√©rifiez votre bo√Æte email !')
      
      return result.booking
      
    } else {
      console.error('‚ùå Erreur lors de la cr√©ation de la r√©servation:')
      console.error(`   Status: ${response.status}`)
      console.error(`   Erreur: ${result.error}`)
      
      if (result.details) {
        console.error('   D√©tails:', result.details)
      }
      
      return null
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
    console.log('üí° Assurez-vous que le serveur Next.js est d√©marr√© (npm run dev)')
    return null
  }
}

async function runRealEmailTests() {
  console.log('üöÄ Test des emails avec talalizakaria0@gmail.com\n')
  console.log('=' .repeat(70))
  console.log('üìß Ce test va cr√©er des r√©servations pour tester les emails r√©els')
  console.log('‚ö†Ô∏è  V√©rifiez votre bo√Æte email : talalizakaria0@gmail.com')
  console.log('‚ö†Ô∏è  V√©rifiez aussi l\'email du m√©decin configur√© dans SMTP_USER')
  console.log('=' .repeat(70))
  console.log('')
  
  // Attendre un peu que le serveur d√©marre
  console.log('‚è≥ Attente du d√©marrage du serveur...')
  await new Promise(resolve => setTimeout(resolve, 3000))
  
  const booking1 = await testBookingWithRealEmail(testBookingData1, 'Test 1 - R√©servation avec message')
  
  if (booking1) {
    // Attendre un peu entre les r√©servations
    console.log('‚è≥ Attente de 2 secondes avant la prochaine r√©servation...')
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    const booking2 = await testBookingWithRealEmail(testBookingData2, 'Test 2 - R√©servation sans message')
    
    console.log('\n' + '=' .repeat(70))
    console.log('‚ú® Tests termin√©s !')
    console.log('')
    console.log('üìß Emails √† v√©rifier :')
    console.log('   ‚Ä¢ talalizakaria0@gmail.com - Confirmations patient')
    console.log('   ‚Ä¢ Email m√©decin (SMTP_USER) - Notifications m√©decin')
    console.log('')
    console.log('üé® Design appliqu√© :')
    console.log('   ‚Ä¢ Th√®me vert professionnel')
    console.log('   ‚Ä¢ Aucun emoji')
    console.log('   ‚Ä¢ Structure claire et corporate')
    console.log('   ‚Ä¢ Format heure "de XX:XX √† XX:XX"')
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runRealEmailTests().catch(console.error)
}

module.exports = { testBookingWithRealEmail, runRealEmailTests }
