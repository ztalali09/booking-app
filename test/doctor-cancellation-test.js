// test/doctor-cancellation-test.js
// Test complet de l'annulation par le m√©decin

const testBookingData = {
  firstName: 'Test',
  lastName: 'DOCTOR_CANCEL',
  email: 'talalizakaria0@gmail.com',
  phone: '0123456789',
  country: 'FR',
  date: new Date('2024-11-06T14:00:00.000Z').toISOString(), // Mercredi 6 novembre 2024
  time: '15:00',
  period: 'afternoon',
  firstConsultation: true,
  consultationReason: 'Test d\'annulation par le m√©decin - Consultation de routine pour v√©rifier le syst√®me d\'annulation par le m√©decin.',
  message: 'Ceci est un test d\'annulation par le m√©decin pour v√©rifier que tout fonctionne parfaitement.'
}

async function createTestBooking() {
  console.log('üß™ Cr√©ation d\'une r√©servation de test pour l\'annulation par le m√©decin...\n')
  console.log('üìã Donn√©es de test:')
  console.log(`   Patient: ${testBookingData.firstName} ${testBookingData.lastName}`)
  console.log(`   Email: ${testBookingData.email}`)
  console.log(`   Date: ${new Date(testBookingData.date).toLocaleDateString('fr-FR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`)
  console.log(`   Heure: ${testBookingData.time} (${testBookingData.period === 'morning' ? 'Matin' : 'Apr√®s-midi'})`)
  console.log('')
  
  try {
    const response = await fetch('http://localhost:3000/api/bookings', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testBookingData)
    })
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ R√©servation de test cr√©√©e avec succ√®s !')
      console.log(`   ID: ${result.booking.id}`)
      console.log(`   Token d'annulation: ${result.booking.cancellationToken}`)
      console.log('')
      console.log('üìß Emails envoy√©s :')
      console.log('   ‚Ä¢ Confirmation patient (talalizakaria0@gmail.com)')
      console.log('   ‚Ä¢ Notification m√©decin (londalonda620@gmail.com)')
      console.log('')
      console.log('üîó Liens d\'annulation :')
      console.log(`   ‚Ä¢ Patient: http://localhost:3000/cancel?token=${result.booking.cancellationToken}`)
      console.log(`   ‚Ä¢ M√©decin: http://localhost:3000/doctor/cancel?token=${result.booking.cancellationToken}`)
      console.log('')
      console.log('üìÖ Google Calendar synchronis√©')
      
      return result.booking
      
    } else {
      console.error('‚ùå Erreur lors de la cr√©ation de la r√©servation:')
      console.error(`   Status: ${response.status}`)
      console.error(`   Erreur: ${result.error}`)
      return null
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
    return null
  }
}

async function testDoctorCancellationAPI(booking) {
  console.log('\nüß™ Test de l\'API d\'annulation par le m√©decin...\n')
  
  try {
    const response = await fetch('http://localhost:3000/api/bookings/doctor-cancel', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        cancellationToken: booking.cancellationToken,
        cancelledBy: 'doctor'
      })
    })
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ API d\'annulation m√©decin fonctionne !')
      console.log(`   Message: ${result.message}`)
      console.log('')
      console.log('üìß Emails d\'annulation envoy√©s :')
      console.log('   ‚Ä¢ talalizakaria0@gmail.com - Notification d\'annulation par le m√©decin')
      console.log('   ‚Ä¢ Le m√©decin est inform√© de l\'annulation')
      console.log('')
      console.log('üìÖ Google Calendar mis √† jour')
      
      return true
    } else {
      console.error('‚ùå Erreur API annulation m√©decin:')
      console.error(`   Status: ${response.status}`)
      console.error(`   Erreur: ${result.error}`)
      return false
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion API annulation m√©decin:', error.message)
    return false
  }
}

async function runDoctorCancellationTest() {
  console.log('üöÄ Test complet de l\'annulation par le m√©decin\n')
  console.log('=' .repeat(80))
  console.log('üë®‚Äç‚öïÔ∏è Ce test va cr√©er une r√©servation et tester l\'annulation par le m√©decin')
  console.log('‚ö†Ô∏è  V√©rifiez les emails : talalizakaria0@gmail.com et londalonda620@gmail.com')
  console.log('üåê Interface m√©decin : http://localhost:3000/doctor/cancel?token=TOKEN')
  console.log('=' .repeat(80))
  console.log('')
  
  // √âtape 1: Cr√©er une r√©servation
  const booking = await createTestBooking()
  
  if (!booking) {
    console.log('‚ùå Impossible de cr√©er la r√©servation de test')
    return
  }
  
  // Attendre un peu entre la cr√©ation et l'annulation
  console.log('‚è≥ Attente de 3 secondes avant l\'annulation par le m√©decin...')
  await new Promise(resolve => setTimeout(resolve, 3000))
  
  // √âtape 2: Tester l'annulation par le m√©decin
  const cancellationSuccess = await testDoctorCancellationAPI(booking)
  
  console.log('\n' + '=' .repeat(80))
  console.log('‚ú® Test d\'annulation par le m√©decin termin√© !')
  console.log('')
  
  if (cancellationSuccess) {
    console.log('‚úÖ R√©sum√© du syst√®me d\'annulation par le m√©decin :')
    console.log('   ‚Ä¢ Interface m√©decin cr√©√©e (/doctor/cancel)')
    console.log('   ‚Ä¢ API d\'annulation m√©decin fonctionnelle (/api/bookings/doctor-cancel)')
    console.log('   ‚Ä¢ Notification patient quand le m√©decin annule')
    console.log('   ‚Ä¢ Google Calendar synchronis√©')
    console.log('   ‚Ä¢ Design professionnel appliqu√©')
    console.log('')
    console.log('üéØ Fonctionnalit√©s de l\'interface m√©decin :')
    console.log('   ‚Ä¢ Affichage complet des d√©tails du patient')
    console.log('   ‚Ä¢ Confirmation avant annulation')
    console.log('   ‚Ä¢ Notification automatique au patient')
    console.log('   ‚Ä¢ Design professionnel bleu')
    console.log('   ‚Ä¢ Messages d\'erreur appropri√©s')
    console.log('')
    console.log('üìß Emails diff√©renci√©s :')
    console.log('   ‚Ä¢ Patient annule : Email vert standard')
    console.log('   ‚Ä¢ M√©decin annule : Email rouge avec message sp√©cial')
    console.log('')
    console.log('üîó Liens d\'annulation :')
    console.log(`   ‚Ä¢ Patient: http://localhost:3000/cancel?token=${booking.cancellationToken}`)
    console.log(`   ‚Ä¢ M√©decin: http://localhost:3000/doctor/cancel?token=${booking.cancellationToken}`)
    console.log('')
    console.log('üéâ Le syst√®me d\'annulation par le m√©decin est complet !')
  } else {
    console.log('‚ùå Le test d\'annulation par le m√©decin a √©chou√©')
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runDoctorCancellationTest().catch(console.error)
}

module.exports = { createTestBooking, testDoctorCancellationAPI, runDoctorCancellationTest }
