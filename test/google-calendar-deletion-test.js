// test/google-calendar-deletion-test.js
// Test de la suppression automatique de Google Calendar

const testBookingData = {
  firstName: 'Test',
  lastName: 'CALENDAR_DELETE',
  email: 'talalizakaria0@gmail.com',
  phone: '0123456789',
  country: 'FR',
  date: new Date('2024-11-10T10:00:00.000Z').toISOString(), // Dimanche 10 novembre 2024
  time: '14:00',
  period: 'afternoon',
  firstConsultation: true,
  consultationReason: 'Test de suppression Google Calendar - Consultation de routine pour v√©rifier la suppression automatique.',
  message: 'Ceci est un test de suppression automatique de Google Calendar.'
}

async function createTestBooking() {
  console.log('üß™ Cr√©ation d\'une r√©servation de test pour la suppression Google Calendar...\n')
  console.log('üìã Donn√©es de test:')
  console.log(`   Patient: ${testBookingData.firstName} ${testBookingData.lastName}`)
  console.log(`   Email: ${testBookingData.email}`)
  console.log(`   Date: ${new Date(testBookingData.date).toLocaleDateString('fr-FR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`)
  console.log(`   Heure: ${testBookingData.time} (${testBookingData.period === 'morning' ? 'Matin' : 'Apr√®s-midi'})`)
  console.log('')
  
  try {
    const response = await fetch('http://localhost:3000/api/bookings', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testBookingData)
    })
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ R√©servation de test cr√©√©e avec succ√®s !')
      console.log(`   ID: ${result.booking.id}`)
      console.log(`   Token d'annulation: ${result.booking.cancellationToken}`)
      console.log(`   Google Calendar Event ID: ${result.booking.googleCalendarEventId || 'Non cr√©√©'}`)
      console.log('')
      console.log('üìß Emails envoy√©s :')
      console.log('   ‚Ä¢ Confirmation patient (talalizakaria0@gmail.com)')
      console.log('   ‚Ä¢ Notification m√©decin (m√©decin@example.com)')
      console.log('')
      console.log('üìÖ Google Calendar synchronis√©')
      console.log('   ‚Ä¢ √âv√©nement cr√©√© automatiquement')
      console.log('   ‚Ä¢ ID stock√© en base de donn√©es')
      console.log('')
      console.log('üîó Liens d\'annulation :')
      console.log(`   ‚Ä¢ Patient: http://localhost:3000/cancel?token=${result.booking.cancellationToken}`)
      console.log(`   ‚Ä¢ M√©decin: http://localhost:3000/doctor/cancel?token=${result.booking.cancellationToken}`)
      
      return result.booking
      
    } else {
      console.error('‚ùå Erreur lors de la cr√©ation de la r√©servation:')
      console.error(`   Status: ${response.status}`)
      console.error(`   Erreur: ${result.error}`)
      return null
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message)
    return null
  }
}

async function testPatientCancellation(booking) {
  console.log('\nüß™ Test d\'annulation par le patient...\n')
  console.log('üìã Processus d\'annulation patient :')
  console.log('   1. ‚úÖ R√©servation marqu√©e comme CANCELLED en base')
  console.log('   2. üìß Email d\'annulation envoy√© au patient')
  console.log('   3. üìß Notification d\'annulation envoy√©e au m√©decin')
  console.log('   4. üìÖ √âv√©nement supprim√© de Google Calendar')
  console.log('')
  
  try {
    const response = await fetch('http://localhost:3000/api/bookings/cancel', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        cancellationToken: booking.cancellationToken
      })
    })
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ Annulation patient r√©ussie !')
      console.log(`   Message: ${result.message}`)
      console.log('')
      console.log('üìß Emails d\'annulation envoy√©s :')
      console.log('   ‚Ä¢ talalizakaria0@gmail.com - Confirmation d\'annulation')
      console.log('   ‚Ä¢ m√©decin@example.com - Notification d\'annulation au m√©decin')
      console.log('')
      console.log('üìÖ Google Calendar mis √† jour :')
      console.log('   ‚Ä¢ √âv√©nement supprim√© automatiquement')
      console.log('   ‚Ä¢ Cr√©neau redevient disponible')
      console.log('')
      console.log('üîç V√©rifiez votre Google Calendar - l\'√©v√©nement doit √™tre supprim√© !')
      
      return true
    } else {
      console.error('‚ùå Erreur lors de l\'annulation patient:')
      console.error(`   Status: ${response.status}`)
      console.error(`   Erreur: ${result.error}`)
      return false
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion annulation patient:', error.message)
    return false
  }
}

async function testDoctorCancellation(booking) {
  console.log('\nüß™ Test d\'annulation par le m√©decin...\n')
  console.log('üìã Processus d\'annulation m√©decin :')
  console.log('   1. ‚úÖ R√©servation marqu√©e comme CANCELLED en base')
  console.log('   2. üìß Email d\'annulation envoy√© au patient')
  console.log('   3. üìÖ √âv√©nement supprim√© de Google Calendar')
  console.log('')
  
  try {
    const response = await fetch('http://localhost:3000/api/bookings/doctor-cancel', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        cancellationToken: booking.cancellationToken,
        cancelledBy: 'doctor',
        doctorMessage: 'Test de suppression Google Calendar par le m√©decin.'
      })
    })
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ Annulation m√©decin r√©ussie !')
      console.log(`   Message: ${result.message}`)
      console.log('')
      console.log('üìß Email d\'annulation envoy√© :')
      console.log('   ‚Ä¢ talalizakaria0@gmail.com - Notification d\'annulation par le m√©decin')
      console.log('   ‚Ä¢ Message personnalis√© du m√©decin inclus')
      console.log('')
      console.log('üìÖ Google Calendar mis √† jour :')
      console.log('   ‚Ä¢ √âv√©nement supprim√© automatiquement')
      console.log('   ‚Ä¢ Cr√©neau redevient disponible')
      console.log('')
      console.log('üîç V√©rifiez votre Google Calendar - l\'√©v√©nement doit √™tre supprim√© !')
      
      return true
    } else {
      console.error('‚ùå Erreur lors de l\'annulation m√©decin:')
      console.error(`   Status: ${response.status}`)
      console.error(`   Erreur: ${result.error}`)
      return false
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion annulation m√©decin:', error.message)
    return false
  }
}

async function runGoogleCalendarDeletionTest() {
  console.log('üöÄ Test de suppression automatique Google Calendar\n')
  console.log('=' .repeat(80))
  console.log('üìÖ Ce test v√©rifie que les √©v√©nements sont supprim√©s automatiquement')
  console.log('‚ö†Ô∏è  V√©rifiez votre Google Calendar pendant les tests')
  console.log('=' .repeat(80))
  console.log('')
  
  // Test 1: Annulation par le patient
  console.log('üß™ TEST 1: Annulation par le patient')
  console.log('=' .repeat(50))
  
  const booking1 = await createTestBooking()
  
  if (!booking1) {
    console.log('‚ùå Impossible de cr√©er la premi√®re r√©servation de test')
    return
  }
  
  console.log('‚è≥ Attente de 3 secondes avant l\'annulation patient...')
  await new Promise(resolve => setTimeout(resolve, 3000))
  
  const patientSuccess = await testPatientCancellation(booking1)
  
  // Test 2: Annulation par le m√©decin
  console.log('\nüß™ TEST 2: Annulation par le m√©decin')
  console.log('=' .repeat(50))
  
  const booking2 = await createTestBooking()
  
  if (!booking2) {
    console.log('‚ùå Impossible de cr√©er la deuxi√®me r√©servation de test')
    return
  }
  
  console.log('‚è≥ Attente de 3 secondes avant l\'annulation m√©decin...')
  await new Promise(resolve => setTimeout(resolve, 3000))
  
  const doctorSuccess = await testDoctorCancellation(booking2)
  
  console.log('\n' + '=' .repeat(80))
  console.log('‚ú® Test de suppression Google Calendar termin√© !')
  console.log('')
  
  if (patientSuccess && doctorSuccess) {
    console.log('‚úÖ R√©sum√© de la suppression automatique Google Calendar :')
    console.log('   ‚Ä¢ Annulation patient : √âv√©nement supprim√© automatiquement')
    console.log('   ‚Ä¢ Annulation m√©decin : √âv√©nement supprim√© automatiquement')
    console.log('   ‚Ä¢ Cr√©neaux redeviennent disponibles')
    console.log('   ‚Ä¢ Synchronisation en temps r√©el')
    console.log('')
    console.log('üéØ Fonctionnement de la suppression :')
    console.log('   1. Cr√©ation RDV ‚Üí √âv√©nement cr√©√© dans Google Calendar')
    console.log('   2. ID √©v√©nement stock√© en base de donn√©es')
    console.log('   3. Annulation ‚Üí Suppression automatique via API Google')
    console.log('   4. Cr√©neau redevient libre imm√©diatement')
    console.log('')
    console.log('üìÖ V√©rifications √† faire :')
    console.log('   ‚Ä¢ Ouvrez votre Google Calendar')
    console.log('   ‚Ä¢ V√©rifiez que les √©v√©nements de test ont disparu')
    console.log('   ‚Ä¢ Les cr√©neaux sont √† nouveau disponibles')
    console.log('')
    console.log('üéâ La suppression automatique Google Calendar fonctionne parfaitement !')
  } else {
    console.log('‚ùå Certains tests de suppression Google Calendar ont √©chou√©')
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runGoogleCalendarDeletionTest().catch(console.error)
}

module.exports = { createTestBooking, testPatientCancellation, testDoctorCancellation, runGoogleCalendarDeletionTest }
